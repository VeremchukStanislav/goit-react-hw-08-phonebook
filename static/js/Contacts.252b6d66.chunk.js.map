{"version":3,"sources":["components/Contacts/ContactForm/ContactForm.js","components/Contacts/ContactItem/ContactItem.js","components/Contacts/ContactList/ContactList.js","components/Contacts/Filter/Filter.js","views/ContactsView.js"],"names":["ContactForm","state","name","number","handleChange","e","currentTarget","value","setState","capitalizeFirstLetter","string","replace","letter","toUpperCase","handleSubmit","preventDefault","props","items","onSubmit","some","item","toLowerCase","alert","reset","this","className","type","onChange","pattern","title","required","Component","connect","contactsSelectors","getContactItems","dispatch","contactsOperations","addContact","ContactItem","id","onDelete","onClick","contacts","getVisibleContacts","contactId","deleteContact","map","getFilter","contactsActions","changeFilter","target","ContactsView","fetchContacts","isLoadingContacts","Loader","getLoading"],"mappings":"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","file":"static/js/Contacts.252b6d66.chunk.js","sourcesContent":["import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport contactsOperations from '../../../redux/contacts/contacts-operations';\nimport contactsSelectors from '../../../redux/contacts/contacts-selectors';\nimport PropTypes from 'prop-types';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleChange = e => {\n    const { name, value } = e.currentTarget;\n    this.setState({ [name]: this.capitalizeFirstLetter(value) });\n  };\n\n  capitalizeFirstLetter = string => {\n    return string.replace(/(^\\w{1})|(\\s+\\w{1})/g, letter => letter.toUpperCase());\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const { name, number } = this.state;\n    const { items, onSubmit } = this.props;\n\n    if (items.some(item => item.name.toLowerCase() === name.toLowerCase())) {\n      return alert(`Name ${name} is already in contacts`);\n    }\n    if (\n      items.some(item => item.number.toLowerCase() === number.toLowerCase())\n    ) {\n      return alert(`Number ${number} is already in contacts`);\n    }\n\n    onSubmit(this.state);\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    const { name, number } = this.state; \n    return (\n      <form onSubmit={this.handleSubmit} className=\"form form-wide\">\n        <label className=\"label\">\n          Name\n          <input\n            className=\"input\"\n            type=\"text\"\n            value={name}\n            onChange={this.handleChange}\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n        <label className=\"label\">\n          Phone\n          <input\n            className=\"input\"\n            type=\"tel\"\n            value={number}\n            onChange={this.handleChange}\n            name=\"number\"\n            required\n          />\n        </label>\n        <button className=\"button\" type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  items: contactsSelectors.getContactItems(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: ({ name, number }) =>\n    dispatch(contactsOperations.addContact(name, number)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import PropTypes from 'prop-types';\n\nconst ContactItem = ({ id, name, number, onDelete }) => (\n  <li className=\"contact-list-item\">\n    <p className=\"name bold\">{name}</p>\n    <p>{number}</p>\n    <button className=\"button button-small\" onClick={() => onDelete(id)}>\n      Delete\n    </button>\n  </li>\n);\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n\nexport default ContactItem;\n","import PropTypes from 'prop-types';\nimport ContactItem from '../ContactItem/ContactItem';\nimport { connect } from 'react-redux';\nimport contactsOperations from '../../../redux/contacts/contacts-operations';\nimport contactsSelectors from '../../../redux/contacts/contacts-selectors';\n\nconst ContactList = ({ contacts, onDelete }) => (\n  <ul className=\"contact-list\">\n    {contacts.map(({ id, name, number }) => (\n      <ContactItem\n        key={id}\n        id={id}\n        name={name}\n        number={number}\n        onDelete={onDelete}\n      />\n    ))}\n  </ul>\n);\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  contacts: contactsSelectors.getVisibleContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDelete: contactId => dispatch(contactsOperations.deleteContact(contactId)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport contactsActions from '../../../redux/contacts/contacts-actions';\nimport contactsSelectors from '../../../redux/contacts/contacts-selectors';\n\nconst Filter = ({ value, onChange }) => (\n  <label className=\"label\">\n    Find contacts by name\n    <input\n      className=\"input\"\n      type=\"text\"\n      value={value}\n      onChange={onChange}\n    ></input>\n  </label>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  value: contactsSelectors.getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(contactsActions.changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport contactsOperations from '../redux/contacts/contacts-operations';\nimport contactsSelectors from '../redux/contacts/contacts-selectors';\n// Components\nimport Loader from '../components/Loader';\nimport ContactForm from '../components/Contacts/ContactForm/ContactForm';\nimport ContactList from '../components/Contacts/ContactList/ContactList';\nimport Filter from '../components/Contacts/Filter/Filter';\n\nclass ContactsView extends Component {\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n\n  render() {\n    return (\n      <div className=\"Contacts\">\n        <ContactForm />\n        <h2 className=\"Contacts_title\">Contacts</h2>\n        <Filter />\n        {this.props.isLoadingContacts && <Loader />}\n        <ContactList />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  isLoadingContacts: contactsSelectors.getLoading(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsView);"],"sourceRoot":""}